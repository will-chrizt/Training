to create an image with specific packages included and reuse later
     steps
  1.docker run -it "container image"
  2.install packages  apt install vim
  3.save - docker commit "container id" "new image name"
  4.docker run -it  "new image name/id"


CRETAED a simple flash app  and containerised using a docker file
docker file:
FROM python:3.11-slim

WORKDIR /app
COPY . .
RUN pip install flask
EXPOSE 5000
CMD ["python","app.py"]


docker build -t app-im .   "creating a base image based on the dockerfile"

docker run -d -p 5000:5000 --name my-app app-im   "creating a container based on the image ,mapped to port 5000"

*Issue i faaced - the container is successfully running but i couldnt see it in my browser local host 127.0.0.1:5000
solved: Realized my host system is the ec2 ubuntu machine not my laptop
so.. checked http://<ip-ec2machine>:5000   "It worked properly"





 learned Docker netwroking     

Bridge(default): it allows the connection between all containers inside the docker. 
tested : created two containers c1 , c2
installed ping in c2 and  did ping <ip of c1>  "it connected"
to check the netwrk type of  a container  -  docker inspect <contianer name>
to create new netwrok  - docker network create <net-name>

***********
docker inspect bridge:
 "Name": "bridge",
        "Id": "f05632bd660c96d5adcf22b7074aeaa17ea69e37e51821bd07aecdebefd98339",
        "Created": "2025-07-21T05:20:37.207564194Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv4": true,
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",  "so when we create containers by defalut they are under same subnet thats why netwrking is possible"
                    "Gateway": "172.17.0.1"}}}
 ip of c1 - 172.17.0.2
 ip of c2 - 172.17.0.3
************


more secure networking - custom netwrk
create a netwrok - docker network create <my-net>
run a container using the netwrok - docker run -d --network=my-net ubuntu 
the custom netwrk will be in a different  subnet compared to bridge:
docker ninspect my-net:
Name": "my-net",
        "Id": "4349159c81d9ef5f5b481a43af33105852836c8b741241c0780204d138979356",
        "Created": "2025-07-21T06:10:37.806806994Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv4": true,
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",  " not same as bridge netwrk "
                    "Gateway": "172.18.0.1"
                }
            ]

-The  custom net can isolate a  container from others 
-Also we can add more containers to the the custom netwrk if its rewuired
-Only contains runnig with type "custom net' can communicate with each other


host netwrok type:
here the network of the container is same as the host machine
-Adv   :  We dont need to specify port while running containers
-Risky : no security,anyone can access the container
command  :docker run -d --network=host ubuntu
the ip of the container is set to 0.0.0.0
  
